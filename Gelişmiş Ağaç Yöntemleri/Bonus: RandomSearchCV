#Hyperparameter Optimization with RandomSEarchCV
#Verilecek br hiperparametre setinden rastgele bir seçim yapar ve bu rastgele seçimleri arar.

rf_model =RandomForestClassifier(random_state=17)
rf_random_params = {"max_depth": np.random.randint(5,50,10),
                    "max_features":[3,5,7,"sqrt"],
                    "min_samples_split":np.random.randint(2,50,20),
                    "n_estimators":[int(x) for x in np.linspace(start=200,stop=1500,num=10)]}

#randomsearch, gridsearche göre daha geniş bir parametre araması yapar.
#gridsearch randomsearche göre daha yavaş.
#ama ne yapman gerektiğini görmek için randomdan gride git

rf_random=RandomizedSearchCV(estimator= rf_model, param_distributions =rf_random_params,
                             n_iter=100, #denenen parametre sayısı
                             cv=3, verbose=True,
                             random_state=42,
                             n_jobs= -1)
rf_random.fit(X,y)
rf_random.best_params_
rf_random_final= rf_model.set_params(**rf_random.best_params_,
                                     random_state=17).fit(X,y)
cv_results =cross_validate(rf_random_final, X, y, cv=5,
                           scoring=["accuracy","f1","roc_auc"])
cv_results["test_accuracy"].mean()
cv_results["test_f1"].mean()
cv_results["test_roc_auc"].mean()
