#Hyperparameter Optimization with RandomSEarchCV
#Verilecek br hiperparametre setinden rastgele bir seçim yapar ve bu rastgele seçimleri arar.

rf_model =RandomForestClassifier(random_state=17)
rf_random_params = {"max_depth": np.random.randint(5,50,10),
                    "max_features":[3,5,7,"sqrt"],
                    "min_samples_split":np.random.randint(2,50,20),
                    "n_estimators":[int(x) for x in np.linspace(start=200,stop=1500,num=10)]}

#randomsearch, gridsearche göre daha geniş bir parametre araması yapar.
#gridsearch randomsearche göre daha yavaş.
#ama ne yapman gerektiğini görmek için randomdan gride git

rf_random=RandomizedSearchCV(estimator= rf_model, param_distributions =rf_random_params,
                             n_iter=100, #denenen parametre sayısı
                             cv=3, verbose=True,
                             random_state=42,
                             n_jobs= -1)
rf_random.fit(X,y)
rf_random.best_params_
rf_random_final= rf_model.set_params(**rf_random.best_params_,
                                     random_state=17).fit(X,y)
cv_results =cross_validate(rf_random_final, X, y, cv=5,
                           scoring=["accuracy","f1","roc_auc"])
cv_results["test_accuracy"].mean()
cv_results["test_f1"].mean()
cv_results["test_roc_auc"].mean()

#Öğrenme Eğrileriyle Model Karmaşıklığı İnceleme

def val_curve_params(model, X, y, param_name, param_range,scoring="roc_auc", cv=10):
    train_score, test_score = validation_curve(model, X=X, y=y,param_name= param_name, param_range=param_range, scoring=scoring,cv=cv)
    mean_train_score= np.mean(train_score, axis=1)
    mean_test_score= np.mean(test_score, axis=1)
    plt.plot(param_range, mean_train_score, label="Training Score",color ='b')
    plt.plot(param_range, mean_test_score, label="Validation Score", color='g')
    plt.title(f"Validation Curve for{type(model).__name__}")
    plt.xlabel(f"Number of {param_name}")
    plt.ylabel(f"{scoring}")
    plt.tight_layout()
    plt.legend(loc='best')
    plt.show(block=True)

rf_val_params=[["max_depth",[5,8,15,20,30,None]],
               ["max_features",[3,5,7,"auto"]],
               ["min_samples_split",[2,5,8,15,20]],
               ["n_estimators", [10,50,100,200,500]]]

rf_model= RandomForestClassifier(random_state=17)

for i in range(len(rf_val_params)):
    val_curve_params(rf_model, X, y, rf_val_params[i][0], rf_val_params[i][1])

rf_val_params[0][1]
