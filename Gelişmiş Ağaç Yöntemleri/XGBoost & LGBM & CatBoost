
#XGBoost : GBM'in hız ve tahmin performansını arttıran framework

xgboost_model= XGBClassifier(random_state=17)

cv_results=cross_validate(xgboost_model, X,y,cv=5, scoring=["accuracy","f1","roc_auc"])
cv_results['test_accuracy'].mean()
cv_results['test_f1'].mean()
cv_results["test_roc_auc"].mean()

xgboost_params={"learning_rate":[0.1,0.01,0.001],
              "max_depth":[5,8,12,15,20],
              "n_estimators":[100,500,1000],
              "subsample":[0.5,0.7,1]}

#LightGBM: XGboosttan daha iyisi/hızlı
#level-wise yerine leaf-wise büyüme stratejisi
#XGBoost geniş kapsamlı arama, LGBM derin arama

lgbm_model=  LGBMClassifier(random_state=17)
lgbm_model.get_params()

cv_results=cross_validate(lgbm_model, X,y,cv=5, scoring=["accuracy","f1","roc_auc"])
cv_results['test_accuracy'].mean()
cv_results['test_f1'].mean()
cv_results["test_roc_auc"].mean()

lgbm_params={"learning_rate":[0.1,0.01,0.001],
              "n_estimators":[100,500,1000],
              "subsample":[0.5,0.7,1]}

lgbm_best_grid =GridSearchCV(lgbm_model, lgbm_params, cv=5, n_jobs=-1, verbose=True).fit(X,y)

lgbm_final=lgbm_model.set_params(**lgbm_best_grid.best_params_,random_state=17).fit(X,y)
lgbm_params={"learning_rate":[0.01,0.02,0.05,0.1],
              "n_estimators":[200,300,350,400,1000,5000,10000],
              "colsample":[0.8,0.9,1]}

cv_results=cross_validate(lgbm_final, X,y,cv=5, scoring=["accuracy","f1","roc_auc"])
cv_results['test_accuracy'].mean()
cv_results['test_f1'].mean()
cv_results["test_roc_auc"].mean()

#Catboost(Category Boosting):hızlı

catboost_model =CatBoostClassifier(random_state=17,verbose=False)

cv_results= cross_validate(catboost_model, X,y,cv=5, scoring=["accuracy","f1","roc_auc"])
cv_results['test_accuracy'].mean()
cv_results['test_f1'].mean()
cv_results["test_roc_auc"].mean()

catboost_params= {"iterations":[200,500],
                  "learning_rate":[0.01,0.1],
                  "depth":[3,6]}

catboost_best_grid=GridSearchCV(catboost_model, catboost_params, cv=5, n_jobs=-1, verbose=True).fit(X,y)

catboost_final=catboost_model.set_params(**catboost_best_grid.best_params_,random_state=17).fit(X,y)

cv_results=cross_validate(catboost_final, X,y,cv=5, scoring=["accuracy","f1","roc_auc"])
cv_results['test_accuracy'].mean()
cv_results['test_f1'].mean()
cv_results["test_roc_auc"].mean()
