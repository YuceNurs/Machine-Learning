train_score, test_score = validation_curve(cart_final, X, y, param_name="max_depth",
                                           param_range=range(1,11),scoring="roc_auc", cv=10)
mean_train_score=np.mean(train_score,axis=1)
mean_test_score=np.mean(test_score, axis = 1)

plt.plot(range(1,11),mean_train_score,
         label='Training Score', color='b')
plt.plot(range(1,11), mean_test_score,
         label ='Test Score', color ='g')
plt.title("Validation Curve for CART")
plt.xlabel("Number of max_depth")
plt.ylabel("AUC")
plt.tight_layout()
plt.legend(loc='best')
plt.show(block=True)


#dinamik bir şekilde model ismi alan bir fonksiyon yazalım 

def val_curve_params(model, X, y, param_name, param_range,scoring="roc_auc", cv=10):
    train_score, test_score = validation_curve(model, X=X, y=y,param_name= param_name, param_range=param_range, scoring=scoring,cv=cv)
    mean_train_score= np.mean(train_score, axis=1)
    mean_test_score= np.mean(test_score, axis=1)
    plt.plot(param_range, mean_train_score, label="Training Score",color ='b')
    plt.plot(param_range, mean_test_score, label="Validation Score", color='g')
    plt.title(f"Validation Curve for{type(model).__name__}")
    plt.xlabel(f"Number of {param_name}")
    plt.ylabel(f"{scoring}")
    plt.tight_layout()
    plt.legend(loc='best')
    plt.show(block=True)

val_curve_params(cart_model, X, y , "max_depth", range(1,11))

# hiperparametre birden fazla ise (aralıklar bağımsız)

cart_val_params= [["max_depth",range(1,11)],["min_samples_split",range(2,20)]]

for i in range(len(cart_val_params)):
    val_curve_params(cart_model, X, y, cart_val_params[i][0],
                     cart_val_params[i][1])
